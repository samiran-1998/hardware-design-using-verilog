`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    23:13:18 10/21/2020 
// Design Name: 
// Module Name:    add_sub 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module add_sub(a,b,sum,cout,cin );
input [4:0]a,b;
output [4:0]sum;
output cout;
input cin;
reg sum1;
wire c1,c2,c3,c4,x1,x2,x3,x4,x5;


xor g1(x1,b[0],cin);
xor g2(x2,b[1],cin);
xor g3(x3,b[2],cin);
xor g4(x4,b[3],cin);
xor g5(x5,b[4],cin);


full_adder FA1 (sum[0],c1,a[0],x1,cin);

full_adder FA2 (sum[1],c2,a[1],x2,c1);

full_adder FA3 (sum[2],c3,a[2],x3,c2);

full_adder FA4 (sum[3],c4,a[3],x4,c3);

full_adder FA5 (sum[4],cout,a[4],x5,c4);

initial 
begin
sum1 = {cout,sum};
if(cin)
$display(" value of a is = %d ,value of b is = %d ,vlue of addition is = %d ",a,b,sum1);
else
$display(" value of a is = %d ,value of b is = %d ,vlue of subtraction is = %d ",a,b,sum1);
end


endmodule


module full_adder (sum,cout,a,b,cin);
input a,b,cin;
output sum,cout;
reg temp1,temp2;
always @(*)
begin
temp1 = (a ^ b ^ cin);
temp2 = (a&b) | (b&cin) | (a&cin);
end
assign sum = temp1;
assign cout = temp2;
endmodule
